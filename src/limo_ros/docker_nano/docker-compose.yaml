name: limo-noetic

services:
  limo-noetic-container:
    image: theconstructai/limo:noetic
    pull_policy: always
    privileged: true
    network_mode: host  
    container_name: limo-noetic
    environment:
      #- ROS_IPV6=on # 기본 off권장 
      - ROS_MASTER_URI=http://master:11311 #마스터가 띄워진 기기의 ip
      - ROS_HOSTNAME=master # 컨테이너 자신의 접근 가능한 ip
    volumes:
      # 1. 호스트의 /dev을 그대로 컨테이너에 보여준다.
      # 이는, lidar(ttyUSB*), MCU(ttyACM*), camera(/dev/video*) 등 모든 장치에 접근이 가능하다. 
      - /dev:/dev
      # 2. 호스트의 소스코드와, 컨테이너 안 소스코드를 같은 경로로 사용한다.
      # 실제 ws의 경로는 왼쪼 ㄱ경로
      - ./volumes/launch_ros_drivers.sh:/launch_ros_drivers.sh
      # 3. GUI 필요하면 아래 2줄 + 호스트에서 `xhost +si:localuser:root`
      # 컨테이너와 호스트 간 화면 접근권한을 풀고, 소켓을 공유하는 설정이다.
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      # environment: [ "DISPLAY=${DISPLAY}", "QT_X11_NO_MITSHM=1" ]
    environment:
      - DISPLAY=${DISPLAY}
      - QT_X11_NO_MITSHM=1   # (Qt/RViz 등 일부 앱의 공유메모리 이슈 회피용)
    # --- 이형태는 보통, 보안, 최소권한 원칙이 필요하고 어떤 디바이스만 쓸지가 명확할 때 사용한다.
    # ==> privileged: true 이걸로 다 대체가 가능하다.
    # devices:
    #   - "/dev/bus/usb:/dev/bus/usb"
    # device_cgroup_rules:
    #   - 'c 189:* rmw'
    entrypoint: /ros_entrypoint.sh
    command: ["/launch_ros_drivers.sh"]
    restart: unless-stopped 
    # always로 하면 컨테이너 꺼도 다시 살아남.  
    # unless stoppe은 수동으로 멈추면 다시 켜지지 않는다.

